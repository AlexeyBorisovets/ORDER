// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/order.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ORDERClient is the client API for ORDER service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ORDERClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	GetOrderByConsID(ctx context.Context, in *GetOrderByConsIDRequest, opts ...grpc.CallOption) (*GetOrderByConsIDResponse, error)
	GetOrderByVendID(ctx context.Context, in *GetOrderByVendIDRequest, opts ...grpc.CallOption) (*GetOrderByVendIDResponse, error)
}

type oRDERClient struct {
	cc grpc.ClientConnInterface
}

func NewORDERClient(cc grpc.ClientConnInterface) ORDERClient {
	return &oRDERClient{cc}
}

func (c *oRDERClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/ORDER/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oRDERClient) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/ORDER/UpdateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oRDERClient) DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/ORDER/DeleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oRDERClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, "/ORDER/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oRDERClient) GetOrderByConsID(ctx context.Context, in *GetOrderByConsIDRequest, opts ...grpc.CallOption) (*GetOrderByConsIDResponse, error) {
	out := new(GetOrderByConsIDResponse)
	err := c.cc.Invoke(ctx, "/ORDER/GetOrderByConsID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oRDERClient) GetOrderByVendID(ctx context.Context, in *GetOrderByVendIDRequest, opts ...grpc.CallOption) (*GetOrderByVendIDResponse, error) {
	out := new(GetOrderByVendIDResponse)
	err := c.cc.Invoke(ctx, "/ORDER/GetOrderByVendID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ORDERServer is the server API for ORDER service.
// All implementations must embed UnimplementedORDERServer
// for forward compatibility
type ORDERServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*SimpleResponse, error)
	DeleteOrder(context.Context, *DeleteOrderRequest) (*SimpleResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	GetOrderByConsID(context.Context, *GetOrderByConsIDRequest) (*GetOrderByConsIDResponse, error)
	GetOrderByVendID(context.Context, *GetOrderByVendIDRequest) (*GetOrderByVendIDResponse, error)
	mustEmbedUnimplementedORDERServer()
}

// UnimplementedORDERServer must be embedded to have forward compatible implementations.
type UnimplementedORDERServer struct {
}

func (UnimplementedORDERServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedORDERServer) UpdateOrder(context.Context, *UpdateOrderRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrder not implemented")
}
func (UnimplementedORDERServer) DeleteOrder(context.Context, *DeleteOrderRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (UnimplementedORDERServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedORDERServer) GetOrderByConsID(context.Context, *GetOrderByConsIDRequest) (*GetOrderByConsIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByConsID not implemented")
}
func (UnimplementedORDERServer) GetOrderByVendID(context.Context, *GetOrderByVendIDRequest) (*GetOrderByVendIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderByVendID not implemented")
}
func (UnimplementedORDERServer) mustEmbedUnimplementedORDERServer() {}

// UnsafeORDERServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ORDERServer will
// result in compilation errors.
type UnsafeORDERServer interface {
	mustEmbedUnimplementedORDERServer()
}

func RegisterORDERServer(s grpc.ServiceRegistrar, srv ORDERServer) {
	s.RegisterService(&ORDER_ServiceDesc, srv)
}

func _ORDER_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ORDERServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ORDER/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ORDERServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ORDER_UpdateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ORDERServer).UpdateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ORDER/UpdateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ORDERServer).UpdateOrder(ctx, req.(*UpdateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ORDER_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ORDERServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ORDER/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ORDERServer).DeleteOrder(ctx, req.(*DeleteOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ORDER_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ORDERServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ORDER/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ORDERServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ORDER_GetOrderByConsID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByConsIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ORDERServer).GetOrderByConsID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ORDER/GetOrderByConsID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ORDERServer).GetOrderByConsID(ctx, req.(*GetOrderByConsIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ORDER_GetOrderByVendID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderByVendIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ORDERServer).GetOrderByVendID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ORDER/GetOrderByVendID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ORDERServer).GetOrderByVendID(ctx, req.(*GetOrderByVendIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ORDER_ServiceDesc is the grpc.ServiceDesc for ORDER service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ORDER_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ORDER",
	HandlerType: (*ORDERServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _ORDER_CreateOrder_Handler,
		},
		{
			MethodName: "UpdateOrder",
			Handler:    _ORDER_UpdateOrder_Handler,
		},
		{
			MethodName: "DeleteOrder",
			Handler:    _ORDER_DeleteOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _ORDER_GetOrder_Handler,
		},
		{
			MethodName: "GetOrderByConsID",
			Handler:    _ORDER_GetOrderByConsID_Handler,
		},
		{
			MethodName: "GetOrderByVendID",
			Handler:    _ORDER_GetOrderByVendID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/order.proto",
}
